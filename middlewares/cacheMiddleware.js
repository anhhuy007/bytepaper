// middlewares/cacheMiddleware.js
import redisClient from '../utils/redisClient.js'

/**
 * A middleware that caches the response body in Redis for a specified expiration time.
 * The cache key is generated by the provided cacheKeyGenerator function.
 *
 * @param {function} cacheKeyGenerator - A function that takes the request object and returns a string,
 *   which is used as the cache key.
 * @param {number} expiration - The expiration time in seconds. Defaults to 300 seconds (5 minutes).
 * @returns {function} - The middleware function.
 * @example
 * const keyGenerator = (req) => `user:${req.params.id}`;
 * const cacheMiddleware = cacheMiddleware(keyGenerator);
 * app.get("/users/:id", cacheMiddleware, (req, res) => {
 *   // ...
 * });
 */
export default function cacheMiddleware(cacheKeyGenerator, expiration = 300) {
  return async (req, res, next) => {
    try {
      const cacheKey = cacheKeyGenerator(req)
      const cachedData = await redisClient.get(cacheKey)

      if (cachedData) {
        console.log('Cache hit:', cacheKey)
        res.send(cachedData) // Trả về HTML từ cache
      } else {
        console.log('Cache miss:', cacheKey)
        // Ghi lại render gốc
        const originalRender = res.render.bind(res)

        res.render = async (view, options, callback) => {
          try {
            // Render HTML
            originalRender(view, options, (err, html) => {
              if (!err) {
                // Lưu HTML vào Redis
                redisClient.setEx(cacheKey, expiration, html).catch((e) => {
                  console.error('Redis setEx error:', e)
                })
              }
              // Trả lại HTML cho client
              if (callback) callback(err, html)
              else res.send(html)
            })
          } catch (e) {
            console.error('Render caching error:', e)
            next(e)
          }
        }

        next()
      }
    } catch (err) {
      console.error('Cache middleware error:', err)
      next()
    }
  }
}

export const deleteCacheMiddleware = (cacheKeyGenerator) => {
  return async (req, res, next) => {
    try {
      const cacheKey = cacheKeyGenerator(req)

      // Xóa cache khỏi Redis
      const result = await redisClient.del(cacheKey)
      if (result) {
        console.log(`Cache deleted: ${cacheKey}`)
      } else {
        console.log(`No cache found to delete for: ${cacheKey}`)
      }

      next()
    } catch (err) {
      console.error('Delete cache middleware error:', err)
      next()
    }
  }
}
